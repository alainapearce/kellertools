var_name <- hfssm_vars[2]
var_name
qv4_parent_clean[[var_name]]
# remove 'Often' and dont know label
qv4_parent_clean[[var_name]] <- sjlabelled::remove_labels(qv4_parent_clean[[var_name]], labels = c("Often True", "Sometimes True", "I don't know or Don't want to answer"))
qv4_parent_clean[[var_name]]
# add Often True = 1 label
qv4_parent_clean[[var_name]] <- sjlabelled::add_labels(qv4_parent_clean[[var_name]], labels = c(`Often True` = 1, `Sometimes True` = 1, `I don't know or Don't want to answer` = -99))
qv4_parent_clean[[var_name]]
#save attributes
set_attr <- attributes(qv4_parent_clean[[var_name]])
#re-level
qv4_parent_clean[[var_name]] <- ifelse(is.na(qv4_parent_clean[[var_name]]), NA,
ifelse(qv4_parent_clean[[var_name]] >= 1, 1,
ifelse(qv4_parent_clean[[var_name]] == 99, -99, 0)))
qv4_parent_labels <- lapply(qv4_parent_dat, function(x) attributes(x)$label)
# 3b) selecting relevant data columns
qv4_parent_clean <- qv4_parent_dat[c(1, 11:94, 97:161)]
## update labels
qv4_parent_clean_labels <- qv4_parent_labels[c(1, 11:94, 97:161)]
# 3c) removing all practice events (e.g., 999)
qv4_parent_clean <- qv4_parent_clean[!is.na(qv4_parent_clean$ID) & qv4_parent_clean$ID < 999, ]
# 4) re-ordering and re-name data columns general order #### 1) demographics - HFSSM, HFIAS, CCHIP, 2) fasting,
# 3) BRIEF, 4) updates
qv4_parent_clean <- qv4_parent_clean[c(2, 1, 17:85, 3, 86:150, 4:16)]
qv4_parent_clean_labels <- qv4_parent_clean_labels[c(2, 1, 17:85, 3, 86:150, 4:16)]
## re-name variables
# make lower case
names(qv4_parent_clean) <- tolower(names(qv4_parent_clean))
# start date rename
names(qv4_parent_clean)[2] <- "start_date"
# remove 'v4'
for (var in 1:length(names(qv4_parent_clean))) {
var_name <- as.character(names(qv4_parent_clean)[var])
# remove trailing 'v4' from names
if (grepl("v4", var_name, fixed = TRUE)) {
names(qv4_parent_clean)[var] <- gsub("v4", "", var_name)
}
# remove '_4' from BRIEF
if (grepl("_4", var_name, fixed = TRUE)) {
names(qv4_parent_clean)[var] <- gsub("_4", "", var_name)
}
}
## fix HFSSM names
names(qv4_parent_clean)[c(3:21)] <- c("hfssm_hh1", "hfssm_hh2", "hfssm_hh3", "hfssm_hh4", "hfssm_ad1", "hfssm_ad1a", "hfssm_ad2", "hfssm_ad3", "hfssm_ad4", "hfssm_ad5", "hfssm_ad5a", "hfssm_ch1", "hfssm_ch2", "hfssm_ch3", "hfssm_ch4", "hfssm_ch5", "hfssm_ch5a", "hfssm_ch6", "hfssm_ch7")
## update data labels
names(qv4_parent_clean_labels) <- names(qv4_parent_clean)
## 5) general fixes to labels (add visit, remove '- 1') ####
## remove formatting errors
for (var in 1:length(names(qv4_parent_clean))) {
var_name <- as.character(names(qv4_parent_clean)[var])
# remove ' \' ' from apostrophes (e.g., child\'s)
if (grepl("'s", qv4_parent_clean_labels[[var_name]], fixed = TRUE)) {
qv4_parent_clean_labels[[var_name]] <- gsub("\\'s", "", qv4_parent_clean_labels[[var_name]])
}
# remove trailing 'v4 ' from labels
if (grepl("V4", qv4_parent_clean_labels[[var_name]], fixed = TRUE)) {
qv4_parent_clean_labels[[var_name]] <- gsub("\\V4 - ", "", qv4_parent_clean_labels[[var_name]])
qv4_parent_clean_labels[[var_name]] <- gsub("\\V4 ", "", qv4_parent_clean_labels[[var_name]])
}
}
## fix HFSSM labels
hfssm_vars <- names(qv4_parent_clean)[c(3:21)]
for (var in 1:length(hfssm_vars)) {
var_name <- hfssm_vars[var]
# update label
qv4_parent_clean_labels[[var_name]] <- paste0("HFSSM ", qv4_parent_clean_labels[[var_name]])
}
#### 6) fix 99's and other poor categories ####
## check for labels/99 option: 1) if 99's exist, make a 'prefere not to answer' (pna) variable to go in pna database, 2) replace 99's with NA and make variable numeric
## make pna database
qv4_parent_pna <- data.frame(id = qv4_parent_clean$id)
qv4_parent_pna_labels <- lapply(qv4_parent_pna, function(x) attributes(x)$label)
qv4_parent_pna_labels[["id"]] <- qv4_parent_clean_labels[["id"]]
pna_label <- "Note: prefer not to answer (pna) marked NA - see pna database for which were pna rather than missing NA"
## 6a) categorical variables with 99's data ####
level99_issue_catvars <- names(qv4_parent_clean)[c(22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 44, 48, 52, 56, 60, 64, 68, 72:144)]
for (v in 1:length(level99_issue_catvars)) {
# get variable name
pvar <- level99_issue_catvars[v]
# if has '99' value, create new pna variable marking pna == 1
if (is.element(99, qv4_parent_clean[[pvar]])) {
pna_dat <- ifelse(is.na(qv4_parent_clean[[pvar]]), 0, ifelse(qv4_parent_clean[[pvar]] == 99, 1, 0))
if (length(names(qv4_parent_pna)) == 0) {
new_pna <- 1
qv4_parent_pna <- data.frame(pna_dat)
} else {
new_pna <- length(names(qv4_parent_pna)) + 1
qv4_parent_pna[[new_pna]] <- pna_dat
}
names(qv4_parent_pna)[new_pna] <- paste0(pvar, "_pna")
# add label to pna database
qv4_parent_pna_labels[[paste0(pvar, "_pna")]] <- paste0("prefer not to answer marked for variable ", pvar, ": ", qv4_parent_clean_labels[[pvar]])
# update true data label (only want to pna label if needed)
qv4_parent_clean_labels[[pvar]] <- paste0(qv4_parent_clean_labels[[pvar]], " -- ", pna_label)
}
# drop 99 level label labels only update if had 99 - done in if statement above
qv4_parent_clean[[pvar]] <- sjlabelled::remove_labels(qv4_parent_clean[[pvar]], labels = "Don't want to answer")
# extract variable attributes
pvar_attr <- attributes(qv4_parent_clean[[pvar]])
# replace 99 values
qv4_parent_clean[[pvar]] <- ifelse(is.na(qv4_parent_clean[[pvar]]) | qv4_parent_clean[[pvar]] == 99, NA, qv4_parent_clean[[pvar]])
# replace attributes
attributes(qv4_parent_clean[[pvar]]) <- pvar_attr
}
## 6a) continuous variables with 99's data ####
level99_issue_contvars <- names(qv4_parent_clean)[c(41:43, 45:47, 49:51, 53:55, 57:59, 61:63, 65:67, 69:71)]
for (v in 1:length(level99_issue_contvars)) {
# get variable name
pvar <- level99_issue_contvars[v]
# if has '99' value, create new pna variable marking pna == 1
if (is.element(99, qv4_parent_clean[[pvar]])) {
pna_dat <- ifelse(is.na(qv4_parent_clean[[pvar]]), 0, ifelse(qv4_parent_clean[[pvar]] == 99, 1, 0))
if (length(names(qv4_parent_pna)) == 0) {
new_pna <- 1
qv4_parent_pna <- data.frame(pna_dat)
} else {
new_pna <- length(names(qv4_parent_pna)) + 1
qv4_parent_pna[[new_pna]] <- pna_dat
}
names(qv4_parent_pna)[new_pna] <- paste0(pvar, "_pna")
# add label to pna database
qv4_parent_pna_labels[[paste0(pvar, "_pna")]] <- paste0("prefer not to answer marked for variable ", pvar, ": ", qv4_parent_clean_labels[[pvar]])
# update true data label (only want to pna label if needed)
qv4_parent_clean_labels[[pvar]] <- paste0(qv4_parent_clean_labels[[pvar]], " -- ", pna_label)
}
# convert 99 to NA and make numeric variable labels only update if had 99 - done in if statement above
qv4_parent_clean[[pvar]] <- ifelse(qv4_parent_clean[[pvar]] == 99, NA, as.numeric(qv4_parent_clean[[pvar]]))
}
## 6b) fix HFSSM value coding and set dont know to -99 ####
often_sometimes_vars <- c('hfssm_hh2', 'hfssm_hh3', 'hfssm_hh4', 'hfssm_ch1', 'hfssm_ch2', 'hfssm_ch3')
wk_freq_vars <- c('hfssm_ad1a', 'hfssm_ad5a')
var_name <- hfssm_vars[2]
var_name
qv4_parent_clean[[var_name]]
#re-level
qv4_parent_clean[[var_name]] <- ifelse(is.na(qv4_parent_clean[[var_name]]), NA,
ifelse(qv4_parent_clean[[var_name]] >= 1, 1,
ifelse(qv4_parent_clean[[var_name]] == 99, -99, 0)))
qv4_parent_clean[[var_name]]
# add labels back with correct values
qv4_parent_clean[[var_name]] <- sjlabelled::add_labels(qv4_parent_clean[[var_name]], labels = c(`Often True` = 1, `Sometimes True` = 1, `Never True` = 0, `I don't know or Don't want to answer` = -99))
qv4_parent_clean[[var_name]]
qv4_parent_clean[[var_name]] <- factor(qv4_parent_clean[[var_name]])
qv4_parent_clean[[var_name]]
qv4_parent_clean[[var_name]] <- sjlabelled::add_labels(qv4_parent_clean[[var_name]], labels = c(`Often True` = 1, `Sometimes True` = 1, `Never True` = 0, `I don't know or Don't want to answer` = -99))
qv4_parent_clean[[var_name]]
qv4_parent_labels <- lapply(qv4_parent_dat, function(x) attributes(x)$label)
# 3b) selecting relevant data columns
qv4_parent_clean <- qv4_parent_dat[c(1, 11:94, 97:161)]
## update labels
qv4_parent_clean_labels <- qv4_parent_labels[c(1, 11:94, 97:161)]
# 3c) removing all practice events (e.g., 999)
qv4_parent_clean <- qv4_parent_clean[!is.na(qv4_parent_clean$ID) & qv4_parent_clean$ID < 999, ]
# 4) re-ordering and re-name data columns general order #### 1) demographics - HFSSM, HFIAS, CCHIP, 2) fasting,
# 3) BRIEF, 4) updates
qv4_parent_clean <- qv4_parent_clean[c(2, 1, 17:85, 3, 86:150, 4:16)]
qv4_parent_clean_labels <- qv4_parent_clean_labels[c(2, 1, 17:85, 3, 86:150, 4:16)]
## re-name variables
# make lower case
names(qv4_parent_clean) <- tolower(names(qv4_parent_clean))
# start date rename
names(qv4_parent_clean)[2] <- "start_date"
# remove 'v4'
for (var in 1:length(names(qv4_parent_clean))) {
var_name <- as.character(names(qv4_parent_clean)[var])
# remove trailing 'v4' from names
if (grepl("v4", var_name, fixed = TRUE)) {
names(qv4_parent_clean)[var] <- gsub("v4", "", var_name)
}
# remove '_4' from BRIEF
if (grepl("_4", var_name, fixed = TRUE)) {
names(qv4_parent_clean)[var] <- gsub("_4", "", var_name)
}
}
## fix HFSSM names
names(qv4_parent_clean)[c(3:21)] <- c("hfssm_hh1", "hfssm_hh2", "hfssm_hh3", "hfssm_hh4", "hfssm_ad1", "hfssm_ad1a", "hfssm_ad2", "hfssm_ad3", "hfssm_ad4", "hfssm_ad5", "hfssm_ad5a", "hfssm_ch1", "hfssm_ch2", "hfssm_ch3", "hfssm_ch4", "hfssm_ch5", "hfssm_ch5a", "hfssm_ch6", "hfssm_ch7")
## update data labels
names(qv4_parent_clean_labels) <- names(qv4_parent_clean)
## 5) general fixes to labels (add visit, remove '- 1') ####
## remove formatting errors
for (var in 1:length(names(qv4_parent_clean))) {
var_name <- as.character(names(qv4_parent_clean)[var])
# remove ' \' ' from apostrophes (e.g., child\'s)
if (grepl("'s", qv4_parent_clean_labels[[var_name]], fixed = TRUE)) {
qv4_parent_clean_labels[[var_name]] <- gsub("\\'s", "", qv4_parent_clean_labels[[var_name]])
}
# remove trailing 'v4 ' from labels
if (grepl("V4", qv4_parent_clean_labels[[var_name]], fixed = TRUE)) {
qv4_parent_clean_labels[[var_name]] <- gsub("\\V4 - ", "", qv4_parent_clean_labels[[var_name]])
qv4_parent_clean_labels[[var_name]] <- gsub("\\V4 ", "", qv4_parent_clean_labels[[var_name]])
}
}
## fix HFSSM labels
hfssm_vars <- names(qv4_parent_clean)[c(3:21)]
for (var in 1:length(hfssm_vars)) {
var_name <- hfssm_vars[var]
# update label
qv4_parent_clean_labels[[var_name]] <- paste0("HFSSM ", qv4_parent_clean_labels[[var_name]])
}
#### 6) fix 99's and other poor categories ####
## check for labels/99 option: 1) if 99's exist, make a 'prefere not to answer' (pna) variable to go in pna database, 2) replace 99's with NA and make variable numeric
## make pna database
qv4_parent_pna <- data.frame(id = qv4_parent_clean$id)
qv4_parent_pna_labels <- lapply(qv4_parent_pna, function(x) attributes(x)$label)
qv4_parent_pna_labels[["id"]] <- qv4_parent_clean_labels[["id"]]
pna_label <- "Note: prefer not to answer (pna) marked NA - see pna database for which were pna rather than missing NA"
## 6a) categorical variables with 99's data ####
level99_issue_catvars <- names(qv4_parent_clean)[c(22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 44, 48, 52, 56, 60, 64, 68, 72:144)]
for (v in 1:length(level99_issue_catvars)) {
# get variable name
pvar <- level99_issue_catvars[v]
# if has '99' value, create new pna variable marking pna == 1
if (is.element(99, qv4_parent_clean[[pvar]])) {
pna_dat <- ifelse(is.na(qv4_parent_clean[[pvar]]), 0, ifelse(qv4_parent_clean[[pvar]] == 99, 1, 0))
if (length(names(qv4_parent_pna)) == 0) {
new_pna <- 1
qv4_parent_pna <- data.frame(pna_dat)
} else {
new_pna <- length(names(qv4_parent_pna)) + 1
qv4_parent_pna[[new_pna]] <- pna_dat
}
names(qv4_parent_pna)[new_pna] <- paste0(pvar, "_pna")
# add label to pna database
qv4_parent_pna_labels[[paste0(pvar, "_pna")]] <- paste0("prefer not to answer marked for variable ", pvar, ": ", qv4_parent_clean_labels[[pvar]])
# update true data label (only want to pna label if needed)
qv4_parent_clean_labels[[pvar]] <- paste0(qv4_parent_clean_labels[[pvar]], " -- ", pna_label)
}
# drop 99 level label labels only update if had 99 - done in if statement above
qv4_parent_clean[[pvar]] <- sjlabelled::remove_labels(qv4_parent_clean[[pvar]], labels = "Don't want to answer")
# extract variable attributes
pvar_attr <- attributes(qv4_parent_clean[[pvar]])
# replace 99 values
qv4_parent_clean[[pvar]] <- ifelse(is.na(qv4_parent_clean[[pvar]]) | qv4_parent_clean[[pvar]] == 99, NA, qv4_parent_clean[[pvar]])
# replace attributes
attributes(qv4_parent_clean[[pvar]]) <- pvar_attr
}
## 6a) continuous variables with 99's data ####
level99_issue_contvars <- names(qv4_parent_clean)[c(41:43, 45:47, 49:51, 53:55, 57:59, 61:63, 65:67, 69:71)]
for (v in 1:length(level99_issue_contvars)) {
# get variable name
pvar <- level99_issue_contvars[v]
# if has '99' value, create new pna variable marking pna == 1
if (is.element(99, qv4_parent_clean[[pvar]])) {
pna_dat <- ifelse(is.na(qv4_parent_clean[[pvar]]), 0, ifelse(qv4_parent_clean[[pvar]] == 99, 1, 0))
if (length(names(qv4_parent_pna)) == 0) {
new_pna <- 1
qv4_parent_pna <- data.frame(pna_dat)
} else {
new_pna <- length(names(qv4_parent_pna)) + 1
qv4_parent_pna[[new_pna]] <- pna_dat
}
names(qv4_parent_pna)[new_pna] <- paste0(pvar, "_pna")
# add label to pna database
qv4_parent_pna_labels[[paste0(pvar, "_pna")]] <- paste0("prefer not to answer marked for variable ", pvar, ": ", qv4_parent_clean_labels[[pvar]])
# update true data label (only want to pna label if needed)
qv4_parent_clean_labels[[pvar]] <- paste0(qv4_parent_clean_labels[[pvar]], " -- ", pna_label)
}
# convert 99 to NA and make numeric variable labels only update if had 99 - done in if statement above
qv4_parent_clean[[pvar]] <- ifelse(qv4_parent_clean[[pvar]] == 99, NA, as.numeric(qv4_parent_clean[[pvar]]))
}
## 6b) fix HFSSM value coding and set dont know to -99 ####
often_sometimes_vars <- c('hfssm_hh2', 'hfssm_hh3', 'hfssm_hh4', 'hfssm_ch1', 'hfssm_ch2', 'hfssm_ch3')
wk_freq_vars <- c('hfssm_ad1a', 'hfssm_ad5a')
var_name <- hfssm_vars[2]
#save attributes
set_attr <- attributes(qv4_parent_clean[[var_name]])
set_attr
#re-level
qv4_parent_clean[[var_name]] <- ifelse(is.na(qv4_parent_clean[[var_name]]), NA,
ifelse(qv4_parent_clean[[var_name]] >= 1, 1,
ifelse(qv4_parent_clean[[var_name]] == 99, -99, 0)))
qv4_parent_clean[[var_name]]
#set attributes
attributes(qv4_parent_clean[[var_name]]) <- set_attr
qv4_parent_clean[[var_name]]
# remove 'Often' and dont know label
qv4_parent_clean[[var_name]] <- sjlabelled::remove_labels(qv4_parent_clean[[var_name]], labels = c("Often True", "Sometimes True", "I don't know or Don't want to answer"))
# add Often True = 1 label
qv4_parent_clean[[var_name]] <- sjlabelled::add_labels(qv4_parent_clean[[var_name]], labels = c(`Often True` = 1, `Sometimes True` = 1, `I don't know or Don't want to answer` = -99))
qv4_parent_clean[[var_name]]
#update label
qv4_parent_clean[[var_name]] <- paste0(qv4_parent_clean_labels[[var_name]], " re-leveled in R so don't know = -99 AND 'often' and 'sometimes' both coded as 1")
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/qualtrics_parent_v4dat.R", echo=TRUE)
v4_pdat <- qualtrics_parent_v4dat(date_str, data_path)
v4_pdat$data$hfssm_hh2
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/qualtrics_parent_v4dat.R", echo=TRUE)
v4_pdat <- qualtrics_parent_v4dat(date_str, data_path)
v4_pdat$data$hfssm_hh2
hfssm_data <- v4_pdat$data[c(1, 3:21)]
names(hfssm_data)
# change -99 to NA
hhfssm_vars <- c("hfssm_hh1", "hfssm_hh2", "hfssm_hh3", "hfssm_hh4", "hfssm_ad1", "hfssm_ad1a", "hfssm_ad2", "hfssm_ad3", "hfssm_ad4", "hfssm_ad5", "hfssm_ad5a", "hfssm_ch1", "hfssm_ch2", "hfssm_ch3", "hfssm_ch4", "hfssm_ch5", "hfssm_ch6", "hfssm_ch7")
for (var in 1:length(hhfssm_vars)){
var_name <- hhfssm_vars[var]
hfssm_data[[var_name]] <- ifelse(is.na(hfssm_data[[var_name]]), NA,
ifelse(hfssm_data[[var_name]] == -99, NA, hfssm_data[[var_name]]))
}
hfssm_data$hfssm_hh1
hfssm_data$hfssm_hh2
hfssm_data$hfssm_hh3
hfssm_data[adult_vars] < 0
# Adult Food Security Scale
adult_vars <- c("hfssm_hh2", "hfssm_hh3", "hfssm_hh4", "hfssm_ad1", "hfssm_ad1a", "hfssm_ad2", "hfssm_ad3", "hfssm_ad4", "hfssm_ad5", "hfssm_ad5a")
hfssm_data[adult_vars] < 0
for (var in 1:length(hhfssm_vars)){
var_name <- hhfssm_vars[var]
hfssm_data[[var_name]] <- as.numeric(hfssm_data[[var_name]])
hfssm_data[[var_name]] <- ifelse(is.na(hfssm_data[[var_name]]), NA,
ifelse(hfssm_data[[var_name]] == -99, NA, hfssm_data[[var_name]]))
}
hfssm_data[[var_name]]
# change -99 to NA
hhfssm_vars <- c("hfssm_hh1", "hfssm_hh2", "hfssm_hh3", "hfssm_hh4", "hfssm_ad1", "hfssm_ad1a", "hfssm_ad2", "hfssm_ad3", "hfssm_ad4", "hfssm_ad5", "hfssm_ad5a", "hfssm_ch1", "hfssm_ch2", "hfssm_ch3", "hfssm_ch4", "hfssm_ch5", "hfssm_ch6", "hfssm_ch7")
hfssm_data <- v4_pdat$data[c(1, 3:21)]
hfssm_data$hfssm_hh2
sjlabelled::remove_labels(hfssm_data[['hfssm_hh2']])
for (var in 1:length(hhfssm_vars)){
var_name <- hhfssm_vars[var]
hfssm_data[[var_name]] <- ifelse(hfssm_data[[var_name]] == -99, NA, hfssm_data[[var_name]])
}
for (var in 1:length(hhfssm_vars)){
var_name <- hhfssm_vars[var]
hfssm_data[hfssm_data[[hfssm_data]] < 0, var_name] <- NA
}
for (var in 1:length(hhfssm_vars)){
var_name <- hhfssm_vars[var]
hfssm_data[hfssm_data[[var_name]] < 0, var_name] <- NA
}
rowMeans(hfssm_data[[adult_vars]] < 0, adult_vars)
hfssm_data$hfssm_hh2
as.numeric(hfssm_data$hfssm_hh2)
for (var in 1:length(hhfssm_vars)){
var_name <- hhfssm_vars[var]
hfssm_data[[var_name]] <- as.numeric(hfssm_data[[var_name]])
hfssm_data[var_name] <- ifelse(is.na(hfssm_data[[var_name]]), NA,
ifelse(hfssm_data[[var_name]] < 0, NA, hfssm_data[[var_name]]))
}
hfssm_data$hfssm_hh2
# Adult Food Security Scale
adult_vars <- c("hfssm_hh2", "hfssm_hh3", "hfssm_hh4", "hfssm_ad1", "hfssm_ad1a", "hfssm_ad2", "hfssm_ad3", "hfssm_ad4", "hfssm_ad5", "hfssm_ad5a")
hfssm_score_dat[["fs_adult"]] <- rowSums(hfssm_data[adult_vars])
# set up database for results create empty matrix
hfssm_score_dat <- data.frame(fs_household = rep(NA, nrow(hfssm_data)), fs_adult = rep(NA, nrow(hfssm_data)), fs_6item = rep(NA, nrow(hfssm_data)), fs_child = rep(NA, nrow(hfssm_data)))
if (isTRUE(ID_arg)) {
hfssm_score_dat <- data.frame(hfssm_data[[parID]], hfssm_score_dat)
names(hfssm_score_dat)[1] <- parID
}
hfssm_score_dat[["fs_6item"]] <- rowMeans(hfssm_data[reward_vars])
hfssm_score_dat[["fs_adult"]] <- rowSums(hfssm_data[adult_vars])
hfssm_score_dat[["fs_adult"]]
hfssm_score_dat[["fs_adult"]] <- rowSums(hfssm_data[adult_vars], na.rm = TRUE)
hfssm_score_dat[["fs_adult"]]
View(hfssm_data)
# set up database for results create empty matrix
hfssm_score_dat <- data.frame(fs_household = rep(NA, nrow(hfssm_data)), fs_adult = rep(NA, nrow(hfssm_data)), fs_6item = rep(NA, nrow(hfssm_data)), fs_child = rep(NA, nrow(hfssm_data)), fs_household_cat = rep(NA, nrow(hfssm_data)), fs_adult_cat = rep(NA, nrow(hfssm_data)), fs_6item_cat = rep(NA, nrow(hfssm_data)), fs_child_cat = rep(NA, nrow(hfssm_data)))
hfssm_score_dat[["fs_adult_cat"]] <- ifelse(hfssm_score_dat[["fs_adult"]] >= 6, 'Very Low Food Security', ifelse(hfssm_score_dat[["fs_adult"]] >=3, 'Low Food Security', ifelse(hfssm_score_dat[["fs_adult"]] > 0, 'Marginal Food Security', 'High Food Security')))
hfssm_score_dat[["fs_adult_cat"]]
hfssm_score_dat[["fs_adult"]]
hfssm_score_dat[["fs_adult"]] <- rowSums(hfssm_data[adult_vars], na.rm = TRUE)
hfssm_score_dat[["fs_adult"]]
d
hfssm_score_dat[["fs_adult_cat"]]
hfssm_score_dat[["fs_adult"]] <- rowSums(hfssm_data[adult_vars], na.rm = TRUE)
hfssm_score_dat[["fs_adult_cat"]] <- ifelse(hfssm_score_dat[["fs_adult"]] >= 6, 'Very Low Food Security', ifelse(hfssm_score_dat[["fs_adult"]] >=3, 'Low Food Security', ifelse(hfssm_score_dat[["fs_adult"]] > 0, 'Marginal Food Security', 'High Food Security')))
hfssm_score_dat[["fs_adult_cat"]]
# Six-Item Food Security Scale
fs6item_vars <- c("hfssm_hh3", "hfssm_hh4", "hfssm_ad1", "hfssm_ad1a", "hfssm_ad2", "hfssm_ad3")
hfssm_score_dat[["fs_6item"]] <- rowSums(hfssm_data[fs6item_vars], na.rm = TRUE)
hfssm_score_dat[["fs_6item"]]
hfssm_score_dat[["fs_6item_cat"]] <- ifelse(hfssm_score_dat[["fs_6item"]] >= 6, 'Very Low Food Security', ifelse(hfssm_score_dat[["fs_6item"]] >=3, 'Low Food Security', ifelse(hfssm_score_dat[["fs_6item"]] > 0, 'Marginal Food Security', 'High Food Security')))
# Children’s Food Security Scale
child_vars <- c("hfssm_ch1", "hfssm_ch2", "hfssm_ch3", "hfssm_ch4", "hfssm_ch5", "hfssm_ch6", "hfssm_ch7")
hfssm_score_dat[["fs_child"]] <- rowSums(hfssm_data[child_vars], na.rm = TRUE)
hfssm_score_dat[["fs_child"]]
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/score_hfssm.R", echo=TRUE)
score_hfssm(hfssm_data)
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/score_hfssm.R", echo=TRUE)
score_hfssm(hfssm_data)
names(v4_pdat$data)
hfias_data <- v4_pdat$data[c(1, 22:39)]
names(hfias_data)
hfias_data$hfias1
hfias_data$hfias1a
## Score Subscales
# HFIAS score
hfias_vars <- c("hfias1a", "hfias2a", "hfias3a", "hfias4a", "hfias5a", "hfias5a", "hfias6a", "hfias7a", "hfias8a", "hfias9a")
hfias_score_dat[["hfias_total"]] <- rowSums(hfias_data[hfias_vars], na.rm = TRUE)
# set up database for results create empty matrix
hfias_score_dat <- data.frame(hfias_total = rep(NA, nrow(hfias_data)), fs_category = rep(NA, nrow(hfias_data)))
hfias_score_dat[["hfias_total"]] <- rowSums(hfias_data[hfias_vars], na.rm = TRUE)
hfias_score_dat[["hfias_total"]]
hfias_data[["hfias1a"]]
hfias_data[["hfias2"]]
hfias_data[["hfias1"]]
(hfias_data[["hfias1"]] == 0 | hfias_data[["hfias1a"]] == 1) & ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0, hfias_data[["hfias5"]] == 0, hfias_data[["hfias6"]] == 0, hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0, hfias_data[["hfias9"]] == 0)
(hfias_data[["hfias1"]] == 0 | hfias_data[["hfias1a"]] == 1) & ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0, hfias_data[["hfias5"]] == 0, hfias_data[["hfias6"]] == 0, hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0)
(hfias_data[["hfias1"]] == 0 | hfias_data[["hfias1a"]] == 1) & ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0, hfias_data[["hfias5"]] == 0 & hfias_data[["hfias6"]] == 0, hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0)
(hfias_data[["hfias1"]] == 0 | hfias_data[["hfias1a"]] == 1) & ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0 & hfias_data[["hfias5"]] == 0 & hfias_data[["hfias6"]] == 0 & hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0)
both <- (hfias_data[["hfias1"]] == 0 | hfias_data[["hfias1a"]] == 1) & ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0 & hfias_data[["hfias5"]] == 0 & hfias_data[["hfias6"]] == 0 & hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0)
first <- hfias_data[["hfias1"]] == 0 | hfias_data[["hfias1a"]] == 1
second <- ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0, hfias_data[["hfias5"]] == 0, hfias_data[["hfias6"]] == 0, hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0, hfias_data[["hfias9"]] == 0
second <- ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0 & hfias_data[["hfias5"]] == 0  & hfias_data[["hfias6"]] == 0 & hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0
)
fs <- first & second
fs == both
# Food Insecurity Category
hfias_score_dat[["hfias_category"]] <-
ifelse((hfias_data[["hfias1"]] == 0 | hfias_data[["hfias1a"]] == 1) & ( hfias_data[["hfias2"]] == 0 & hfias_data[["hfias3"]] == 0 & hfias_data[["hfias4"]] == 0 & hfias_data[["hfias5"]] == 0 & hfias_data[["hfias6"]] == 0 & hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0), 'Food Secure',
ifelse((hfias_data[["hfias1a"]] > 1 | hfias_data[["hfias2a"]] > 0 | hfias_data[["hfias3a"]] == 1 | hfias_data[["hfias4a"]] == 1) & (hfias_data[["hfias5"]] == 0 & hfias_data[["hfias6"]] == 0 & hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0), 'Midly Food Insecure Access',
ifelse((hfias_data[["hfias3a"]] > 1 | hfias_data[["hfias4a"]] > 1 | hfias_data[["hfias5a"]] == 1 | hfias_data[["hfias5a"]] == 2 | hfias_data[["hfias6a"]] == 1 | hfias_data[["hfias6a"]] == 2) & (hfias_data[["hfias7"]] == 0 & hfias_data[["hfias8"]] == 0 & hfias_data[["hfias9"]] == 0), 'Moderately Food Insecure Access',
ifelse(hfias_data[["hfias5a"]] == 3 | hfias_data[["hfias6a"]] == 3 | hfias_data[["hfias7a"]] > 0 | hfias_data[["hfias8a"]] > 0 | hfias_data[["hfias9a"]] > 0, 'Moderately Food Insecure Access', 'Other'))))
hfias_score_dat[["hfias_category"]]
View(hfias_data)
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/score_hfias.R", echo=TRUE)
score_hfias(hfias_data)
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/score_hfias.R", echo=TRUE)
score_hfias(hfias_data)
names(v4_pdat)
names(v4_pdat$data)
cchip_data <- v4_pdat[c(1, 40:72)]
names(cchip_data)
cchip_data <- v4_pdat$data[c(1, 40:72)]
names(cchip_data)
cchip_data <- v4_pdat$data[c(1, 40:71)]
names(cchip_data)
cchip_data$cchip1
cchip_data$cchip2
cchip_data$cchip3
cchip_data$cchip4
cchip_data$cchip5
# set up database for results create empty matrix
cchip_score_dat <- data.frame(cchip_total = rep(NA, nrow(cchip_data)), cchip_category = rep(NA, nrow(cchip_data)))
if (isTRUE(ID_arg)) {
cchip_score_dat <- data.frame(cchip_data[[parID]], cchip_score_dat)
names(cchip_score_dat)[1] <- parID
}
# set up labels for hfssm_score_dat
cchip_score_dat_labels <- lapply(cchip_score_dat, function(x) attributes(x)$label)
## Score Subscales
# CCHIP score
cchip_vars <- c('cchip1', 'cchip5', 'cchip9', 'cchip13', 'cchip17', 'cchip21', 'cchip25', 'cchip29')
cchip_score_dat[["cchip_total"]] <- rowSums(cchip_data[cchip_vars], na.rm = TRUE)
cchip_score_dat[["cchip_total"]]
View(cchip_data[cchip_vars])
# Food Insecurity Category
cchip_score_dat[["cchip_category"]] <- ifelse(cchip_score_dat[["cchip_total"]] >= 5, 'Hungry', ifelse(cchip_score_dat[["cchip_total"]] >= 1, 'At Risk for Hunger', 'Not At Risk for Hunger'))
cchip_score_dat[["cchip_category"]]
# Food Insecurity Category
cchip_score_dat[["cchip_category"]] <- ifelse(cchip_score_dat[["cchip_total"]] >= 5, 'Hungry', ifelse(cchip_score_dat[["cchip_total"]] >= 1, 'At Risk for Hunger', 'Not Hungry'))
cchip_score_dat[["cchip_category"]]
# Food Insecurity Category
cchip_score_dat[["cchip_category"]] <- ifelse(cchip_score_dat[["cchip_total"]] >= 5, 2, ifelse(cchip_score_dat[["cchip_total"]] >= 1, 1, 0))
cchip_score_dat[["cchip_category"]] <- sjlabelled::add_labels(cchip_score_dat[["cchip_category"]], labels = c(`Hungry` = 2, `At Risk for Hunger` = 1, `Not Hungry` = 0))
cchip_score_dat[["cchip_category"]]
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/score_cchip.R", echo=TRUE)
score_cchip(cchip_data)
cchip_scores <- score_cchip(cchip_data)
cchip_scores$cchip_category
names(v4_pdat)
names(v4_pdat$data)
brief_data <- v4_pdat$data[c(1, 75:137)]
names(brief_data)
brief_data$brief1
install.packages("readxl")
library(readxl)
brief2_boys5_7 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "boys5-7")
names(brief2_boys5_7)
View(brief2_boys5_7)
brief2_boys5_7 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "boys5-7")
brief2_girls5_7 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "girls5-7")
brief2_boys8_10 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "boys8-10")
brief2_girls8_10 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "girls8-10")
brief2_boys11_13 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "boys11-13")
brief2_girls11_13 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "girls11-13")
brief2_boys14_18 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "boys14-18")
brief2_girls14_18 <- readxl::read_excel("data-raw/brief2_scoringtables.xlsx", sheet = "girls14-18")
brief2_scoreref <- list(boys5_7 = brief2_boys5_7,
girls5_7 = brief2_girls5_7,
boys8_10 = brief2_boys8_10,
girls8_10 = brief2_girls8_10,
boys11_13 = brief2_boys11_13,
girls11_13 = brief2_girls11_13,
boys14_18 = brief2_boys14_18,
girls14_18 = brief2_girls14_18)
brief2_scoreref
names(brief2_scoreref)
#make a database for the package
usethis::use_data(brief2_scoreref, overwrite = TRUE)
names(fbs_ED)
brief2_scoretables <- list(boys5_7 = brief2_boys5_7,
girls5_7 = brief2_girls5_7,
boys8_10 = brief2_boys8_10,
girls8_10 = brief2_girls8_10,
boys11_13 = brief2_boys11_13,
girls11_13 = brief2_girls11_13,
boys14_18 = brief2_boys14_18,
girls14_18 = brief2_girls14_18)
#make a database for the package
usethis::use_data(brief2_scoretables, overwrite = TRUE)
names(brief_data)
# Inhibit
inhib_vars <- c("brief1", "brief10", "brief16", "brief24", "brief30", "brief39", "brief48", "brief62")
brief_score_dat[["inhibit_raw"]] <- rowSums(brief_data[inhib_vars])
# set up database for results create empty matrix
brief_score_dat <- data.frame(inhibit_raw = rep(NA, nrow(brief_data)), inhibit_t = rep(NA, nrow(brief_data)), inhibit_p = rep(NA, nrow(brief_data)), selfmon_raw = rep(NA, nrow(brief_data)), selfmon_t = rep(NA, nrow(brief_data)), selfmon_p = rep(NA, nrow(brief_data)), shift_raw = rep(NA, nrow(brief_data)), shift_t = rep(NA, nrow(brief_data)), shift_p = rep(NA, nrow(brief_data)), emcont_raw = rep(NA, nrow(brief_data)), emcont_t = rep(NA, nrow(brief_data)), emcont_p = rep(NA, nrow(brief_data)), initiate_raw = rep(NA, nrow(brief_data)), initiate_t = rep(NA, nrow(brief_data)), initiate_p = rep(NA, nrow(brief_data)), wm_raw = rep(NA, nrow(brief_data)), wm_t = rep(NA, nrow(brief_data)), wm_p = rep(NA, nrow(brief_data)), planorg_raw = rep(NA, nrow(brief_data)), planorg_t = rep(NA, nrow(brief_data)), planorg_p = rep(NA, nrow(brief_data)), taskmon_raw = rep(NA, nrow(brief_data)), taskmon_t = rep(NA, nrow(brief_data)), taskmon_p = rep(NA, nrow(brief_data)), orgmat_raw = rep(NA, nrow(brief_data)), orgmat_t = rep(NA, nrow(brief_data)), orgmat_p = rep(NA, nrow(brief_data)), bri_raw = rep(NA, nrow(brief_data)), bri_t = rep(NA, nrow(brief_data)), bri_p = rep(NA, nrow(brief_data)), eri_raw = rep(NA, nrow(brief_data)), eri_t = rep(NA, nrow(brief_data)), eri_p = rep(NA, nrow(brief_data)), cri_raw = rep(NA, nrow(brief_data)), cri_t = rep(NA, nrow(brief_data)), cri_p = rep(NA, nrow(brief_data)), gec_raw = rep(NA, nrow(brief_data)), gec_t = rep(NA, nrow(brief_data)), gec_p = rep(NA, nrow(brief_data)), negativity_p = rep(NA, nrow(brief_data)), negativity_cat = rep(NA, nrow(brief_data)), inconsistancy = rep(NA, nrow(brief_data)), inconsistancy_p = rep(NA, nrow(brief_data)), inconsistancy_cat = rep(NA, nrow(brief_data)), infrequency = rep(NA, nrow(brief_data)), infrequency_p = rep(NA, nrow(brief_data)), infrequency_cat = rep(NA, nrow(brief_data)))
# set up labels for brief_score_dat
brief_score_dat_labels <- lapply(brief_score_dat, function(x) attributes(x)$label)
# Inhibit
inhib_vars <- c("brief1", "brief10", "brief16", "brief24", "brief30", "brief39", "brief48", "brief62")
brief_score_dat[["inhibit_raw"]] <- rowSums(brief_data[inhib_vars])
brief_score_dat[["inhibit_raw"]]
