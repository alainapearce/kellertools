tbl_high_both <-
V1_7 %>%
filter(risk_status_both == "High Risk") %>%
select(sex, age_yr, visit) %>%
tbl_summary(
by = visit,
label = list(sex ~ "Sex",
age_yr ~ "Age (years)")) %>%
modify_header(all_stat_cols() ~ "**{level}**")
visit_byrisk_mom <-
tbl_stack(
list(tbl_low_mom, tbl_high_mom),
group_header = c("Low Risk", "High Risk")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
visit_byrisk_mom
visit_byrisk_both <-
tbl_stack(
list(tbl_low_both, tbl_high_both),
group_header = c("Low Risk", "High Risk")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
visit_byrisk_both
View(data_v2)
visit_byrisk_both
# risk_low
tbl_low_mom <-
V1_7 %>%
filter(risk_status_mom == "Low Risk") %>%
select(sex, age_yr, visit) %>%
tbl_summary(
by = visit,
label = list(sex ~ "Sex",
age_yr ~ "Age (years)")) %>%
modify_header(all_stat_cols() ~ "**{level}**")
# risk_high
tbl_high_mom <-
V1_7 %>%
filter(risk_status_mom == "High Risk") %>%
select(sex, age_yr, visit) %>%
tbl_summary(
by = visit,
label = list(sex ~ "Sex",
age_yr ~ "Age (years)")) %>%
modify_header(all_stat_cols() ~ "**{level}**")
visit_byrisk_mom <-
tbl_stack(
list(tbl_low_mom, tbl_high_mom),
group_header = c("Low Risk", "High Risk")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
visit_byrisk_mom
Table3 <-
tbl_summary(
V1_7,
by = visit, # split table by group
label = list(sex ~ "Sex",
risk_status_mom ~ "Risk status (mom)",
risk_status_both ~ "Risk status (both)",
age_yr ~ "Age (years)")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
Table3
View(data_v6)
mri <- data_v6[["data"]][c('id', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
View(mri)
mri <- data_v6[["data"]][c('id', 'start_date',notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
View(mri)
View(data_v7)
mri <- data_v6[["data"]][c('id' ,risk_status_mom, 'risk_status_both','start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
mri <- data_v6[["data"]][c('id', 'risk_status_mom', 'risk_status_both','start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
mri <- data_v6[["data"]][c('id', 'risk_status_mom', 'risk_status_both', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
addDemo <- function(df, reference_df){
for (row in 1:nrow(df)) {
row_id = df$id[row]
# Add risk status
df$risk_status_mom[row] <- reference_df$risk_status_mom[reference_df$id ==
row_id]
df$risk_status_both[row] <- reference_df$risk_status_both[reference_df$id ==
row_id]
# Add sex
df$sex[row] <- reference_df$sex[reference_df$id == row_id]
# Calculate age at visit
df$age_yr[row] <- round(lubridate::`%--%`(reference_df$dob[reference_df$id == row_id],
df$start_date[row])/lubridate::years(1), digits = 2)
}
return(df)
}
addDemo(mri, V1)
mri = addDemo(mri, V1)
View(mri)
mri$scans_completed <- 1
ls
mri$scans_completed
mri$scans_completed <- ifelse((mri$id == 6 | mri$id == 107 | mri$id == 113 ), 0, 1)
mri$scans_completed
sum(mri$scans_completed)
table(mri$scans_completed ~ mri$risk_status_mom)
table(mri$scans_completed, mri$risk_status_mom)
mri$risk_status_mom
Table3 <-
tbl_summary(
V1_7,
by = visit, # split table by group
label = list(sex ~ "Sex",
risk_status_mom ~ "Risk status (mom)",
risk_status_both ~ "Risk status (both)",
age_yr ~ "Age (years)")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
Table3
V1_7
Table3c <-
tbl_summary(
V1_7_nodemo,
by = visit, # split table by group
label = list(risk_status_mom ~ "Risk status (mom)",
risk_status_both ~ "Risk status (both)")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
V1_7_nodemo <- subset(V1_7, select = c(risk_status_mom, risk_status_both, visit))
Table3c <-
tbl_summary(
V1_7_nodemo,
by = visit, # split table by group
label = list(risk_status_mom ~ "Risk status (mom)",
risk_status_both ~ "Risk status (both)")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
Table3c
Table3c <-
tbl_summary(
V1_7_nodemo,
by = visit, # split table by group
label = list(risk_status_mom ~ "Risk status (based on maternal BMI)",
risk_status_both ~ "Risk status (based on maternal and paternal BMI)")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
Table3c
library(gtsummary)
theme_gtsummary_compact()
#need to load the package also or it wont work
library(kellertools)
```
<!-- need a setup chunk to set your preference for the .Rmd - below is one I copied from a previous paper .Rmd, but we can edit -->
```{r setup2, include=FALSE}
knitr::opts_chunk$set(tidy = TRUE, tidy.opts = list(comment = FALSE), echo=TRUE, warning=FALSE, message=FALSE, comment = NA)
#also need .Rmd related packages loaded/installed
library(knitr)
library(kableExtra)
```
<!-- need to split chunks. Each chunk should have a single purpose so that you can control what is displayed in the pdf of the vignette.  -->
<!-- pretty sure you can't have spaces in your cunck labels when you convert to pdf -->
```{r load_data}
#this path is specific to your laptop - we should try to create some fake/simulated data that we can rely on for examples
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
#will probably want to do individually for each table so get the data needed for each part separately - may need to change some of these to the user-interface wrappers once they are done
# Load data
data_v1 <- util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
# select variables
## CHANGE RISK VARIABLES TO risk_status_mom / risk_status_both
Table1_vars <- data_v1[['data']][c('age_yr', 'sex', 'risk_status_mom','risk_status_both', 'bmi_screenout')]
# convert 'haven_labelled' datatypes - your loop didn't change/update the 'Table1_vars', only the df in the dfList so that tables were not able to be created. This is where it is important that it is run fully independently/with cleared environment to ensure it works. By making your loop a function, you can apply it directly to your tables and return the changes. As we move forward, it may be a good idea to make these types of functions part of the package since they aren't super common in datasets typically needed with R.
convertHaven <- function(df){
for (v in 1:ncol(df)) {
var_name <- names(df)[v]
class <- class(df[[var_name]])
if (grepl("haven_labelled", class[1])  ) {
df[[var_name]] <- labelled::unlabelled(df[[var_name]])
}
}
return(df)
}
Table1_vars <- convertHaven(Table1_vars)
```
<!-- Add narrative for Table 1  -->
```{r Table1}
# make Table 1
Table1 <-
tbl_summary(
Table1_vars,
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"),
label = list(age_yr ~ "Age (years)",
sex ~ "Sex",
risk_status_mom ~ "Risk (mom)",
risk_status_both ~ "Risk (mom and dad)",
bmi_screenout ~ "Child BMI screenout")
) %>%
# update the column header
#modify_header(label = "**Variable**") %>%
bold_labels()
library(dplyr)
#this path is specific to your laptop - we should try to create some fake/simulated data that we can rely on for examples
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
# Load data
data_v1 <- util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
data_v2 <- util_fbs_merge_v2(child_file_pattern = 'Child_V2', parent_file_pattern = 'Parent_V2', parentV4_file_pattern = 'Parent_V4', data_path = data_path)
data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path, model_DD = FALSE)
data_v4 <- util_fbs_merge_v4(child_file_pattern = 'Child_V4', parent_file_pattern = 'Parent_V4', data_path = data_path)
data_v5 <- util_fbs_merge_v5(child_file_pattern = 'Child_V5', parent_file_pattern = 'Parent_V5', data_path = data_path)
data_v6 <- util_fbs_merge_v6(child_file_pattern = 'Child_V6', parent_file_pattern = 'Parent_V6', data_path = data_path)
data_v7 <- util_fbs_merge_v7(child_file_pattern = 'Child_V7', parent_file_pattern = 'Parent_V7', data_path = data_path)
#' Extract id, start_date, visit number from list[["data"]]
#' @param list a list with data saved in a dataframe 'data' (e.g., output of running util_fbs_merge scripts)
#' @return a dataframe with ids, startdates, and visit number
#' @examples
#' #if output of merge script saved as 'data_v3': E.g.) data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path)
#' extractIDs(data_v3)
extractIDs <- function(list){
# save name of list as a string
dataframe_name <- deparse(substitute(list))
# get visit number
visit_num <- substr(dataframe_name, 7, 7)
# Extract ID and assign to list_name
dataframe_name <- list[["data"]][c('id','start_date')]
# Add visit column
dataframe_name$visit <- visit_num
return(dataframe_name)
}
#' Add demo data (risk_cat, sex, age) to a dataframe by matching IDs with a reference dataframe
#' @param df dataframe with 'id' column
#' @param reference_df dataframe 'id' and demographic variables (sex, risk_status_mom, risk_status_both, dob)
#' @return dataframe with id, sex, risk_cat, and age_yr columns
addDemo <- function(df, reference_df){
for (row in 1:nrow(df)) {
row_id = df$id[row]
# Add risk status
df$risk_status_mom[row] <- reference_df$risk_status_mom[reference_df$id ==
row_id]
df$risk_status_both[row] <- reference_df$risk_status_both[reference_df$id ==
row_id]
# Add sex
df$sex[row] <- reference_df$sex[reference_df$id == row_id]
# Calculate age at visit
df$age_yr[row] <- round(lubridate::`%--%`(reference_df$dob[reference_df$id == row_id],
df$start_date[row])/lubridate::years(1), digits = 2)
}
return(df)
}
# Extract IDs and demo variables from V1 database
V1 <- data_v1[["data"]][c('id', 'risk_status_mom','risk_status_both','sex', 'dob', 'age_yr')]
V1$visit <- "1"
# Extract IDs from V2-V7 databases and add visit column (use extractIDs())
V2 <- extractIDs(data_v2)
V3 <- extractIDs(data_v3)
V4 <- extractIDs(data_v4)
V5 <- extractIDs(data_v5)
V6 <- extractIDs(data_v6)
V7 <- extractIDs(data_v7)
# Add demo data to V2-V7 dataframes by referencing V1
nonV1_list <- list(V2, V3, V4, V5, V6, V7)
nonV1_list <- lapply(nonV1_list, addDemo, reference_df = V1)
# Combine visit dataframes
V1_7 <- bind_rows(V1, nonV1_list)
# Convert 'haven_labelled' datatypes
V1_7 <- convertHaven(V1_7)
# Select variables to include in table
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
Table3 <-
tbl_summary(
V1_7,
by = visit, # split table by group
label = list(sex ~ "Sex",
risk_status_mom ~ "Risk status (mom)",
risk_status_both ~ "Risk status (both)",
age_yr ~ "Age (years)")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
V1_7_nodemo <- subset(V1_7, select = c(risk_status_mom, risk_status_both, visit))
# make Table 3
Table3c <-
tbl_summary(
V1_7_nodemo,
by = visit, # split table by group
label = list(risk_status_mom ~ "Risk status (based on maternal BMI)",
risk_status_both ~ "Risk status (based on maternal and paternal BMI)")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
Table3c
Table3 <-
tbl_summary(
V1_7,
by = visit, # split table by group
label = list(sex ~ "Sex",
risk_status_mom ~ "Risk status (mom)",
risk_status_both ~ "Risk status (both)",
age_yr ~ "Age (years)"),
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n}")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
Table3
Table3c <-
tbl_summary(
V1_7_nodemo,
by = visit, # split table by group
label = list(risk_status_mom ~ "Risk status (based on maternal BMI)",
risk_status_both ~ "Risk status (based on maternal and paternal BMI)"),
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n}")
) %>%
modify_header(label = "**Visit**") %>% # update the column header
bold_labels()
Table3c
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
addDemo(mri, V1)
mri$scans_completed <- ifelse((mri$id == 6 | mri$id == 107 | mri$id == 113 ), 0, 1)
table(mri$scans_completed, mri$risk_status_mom)
View(mri)
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3', 'notes_mri_run4', 'notes_mri_run5')]
View(mri)
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3', 'notes_mri_run4', 'notes_mri_run5', 'notes_mri_other')]
View(data_v6)
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3', 'notes_mri_run4', 'notes_mri_run5', 'childnotes')]
View(mri)
library(gtsummary)
theme_gtsummary_compact()
#need to load the package also or it wont work
library(kellertools)
#also need .Rmd related packages loaded/installed
library(knitr)
library(kableExtra)
library(dplyr)
#this path is specific to your laptop - we should try to create some fake/simulated data that we can rely on for examples
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
# Load data
data_v1 <- util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
data_v2 <- util_fbs_merge_v2(child_file_pattern = 'Child_V2', parent_file_pattern = 'Parent_V2', parentV4_file_pattern = 'Parent_V4', data_path = data_path)
data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path, model_DD = FALSE)
data_v4 <- util_fbs_merge_v4(child_file_pattern = 'Child_V4', parent_file_pattern = 'Parent_V4', data_path = data_path)
data_v5 <- util_fbs_merge_v5(child_file_pattern = 'Child_V5', parent_file_pattern = 'Parent_V5', data_path = data_path)
data_v6 <- util_fbs_merge_v6(child_file_pattern = 'Child_V6', parent_file_pattern = 'Parent_V6', data_path = data_path)
data_v7 <- util_fbs_merge_v7(child_file_pattern = 'Child_V7', parent_file_pattern = 'Parent_V7', data_path = data_path)
#' Extract id, start_date, visit number from list[["data"]]
#' @param list a list with data saved in a dataframe 'data' (e.g., output of running util_fbs_merge scripts)
#' @return a dataframe with ids, startdates, and visit number
#' @examples
#' #if output of merge script saved as 'data_v3': E.g.) data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path)
#' extractIDs(data_v3)
library(dplyr)
#this path is specific to your laptop - we should try to create some fake/simulated data that we can rely on for examples
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
# Load data
data_v1 <- util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
data_v2 <- util_fbs_merge_v2(child_file_pattern = 'Child_V2', parent_file_pattern = 'Parent_V2', parentV4_file_pattern = 'Parent_V4', data_path = data_path)
data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path, model_DD = FALSE)
data_v4 <- util_fbs_merge_v4(child_file_pattern = 'Child_V4', parent_file_pattern = 'Parent_V4', data_path = data_path)
data_v5 <- util_fbs_merge_v5(child_file_pattern = 'Child_V5', parent_file_pattern = 'Parent_V5', data_path = data_path)
data_v6 <- util_fbs_merge_v6(child_file_pattern = 'Child_V6', parent_file_pattern = 'Parent_V6', data_path = data_path)
data_v7 <- util_fbs_merge_v7(child_file_pattern = 'Child_V7', parent_file_pattern = 'Parent_V7', data_path = data_path)
#' Extract id, start_date, visit number from list[["data"]]
#' @param list a list with data saved in a dataframe 'data' (e.g., output of running util_fbs_merge scripts)
#' @return a dataframe with ids, startdates, and visit number
#' @examples
#' #if output of merge script saved as 'data_v3': E.g.) data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path)
#' extractIDs(data_v3)
extractIDs <- function(list){
# save name of list as a string
dataframe_name <- deparse(substitute(list))
# get visit number
visit_num <- substr(dataframe_name, 7, 7)
# Extract ID and assign to list_name
dataframe_name <- list[["data"]][c('id','start_date')]
# Add visit column
dataframe_name$visit <- visit_num
return(dataframe_name)
}
#' Add demo data (risk_cat, sex, age) to a dataframe by matching IDs with a reference dataframe
#' @param df dataframe with 'id' column
#' @param reference_df dataframe 'id' and demographic variables (sex, risk_status_mom, risk_status_both, dob)
#' @return dataframe with id, sex, risk_cat, and age_yr columns
addDemo <- function(df, reference_df){
for (row in 1:nrow(df)) {
row_id = df$id[row]
# Add risk status
df$risk_status_mom[row] <- reference_df$risk_status_mom[reference_df$id ==
row_id]
df$risk_status_both[row] <- reference_df$risk_status_both[reference_df$id ==
row_id]
# Add sex
df$sex[row] <- reference_df$sex[reference_df$id == row_id]
# Calculate age at visit
df$age_yr[row] <- round(lubridate::`%--%`(reference_df$dob[reference_df$id == row_id],
df$start_date[row])/lubridate::years(1), digits = 2)
}
return(df)
}
# Extract IDs and demo variables from V1 database
V1 <- data_v1[["data"]][c('id', 'risk_status_mom','risk_status_both','sex', 'dob', 'age_yr')]
V1$visit <- "1"
# Extract IDs from V2-V7 databases and add visit column (use extractIDs())
V2 <- extractIDs(data_v2)
V3 <- extractIDs(data_v3)
V4 <- extractIDs(data_v4)
V5 <- extractIDs(data_v5)
V6 <- extractIDs(data_v6)
V7 <- extractIDs(data_v7)
# Add demo data to V2-V7 dataframes by referencing V1
nonV1_list <- list(V2, V3, V4, V5, V6, V7)
nonV1_list <- lapply(nonV1_list, addDemo, reference_df = V1)
# Combine visit dataframes
V1_7 <- bind_rows(V1, nonV1_list)
# Convert 'haven_labelled' datatypes
V1_7 <- convertHaven(V1_7)
# Select variables to include in table
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
convertHaven <- function(df){
for (v in 1:ncol(df)) {
var_name <- names(df)[v]
class <- class(df[[var_name]])
if (grepl("haven_labelled", class[1])  ) {
df[[var_name]] <- labelled::unlabelled(df[[var_name]])
}
}
convertHaven <- function(df){
for (v in 1:ncol(df)) {
var_name <- names(df)[v]
class <- class(df[[var_name]])
if (grepl("haven_labelled", class[1])  ) {
df[[var_name]] <- labelled::unlabelled(df[[var_name]])
}
}
return(df)
}
V1_7 <- bind_rows(V1, nonV1_list)
V1_7 <- convertHaven(V1_7)
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
View(V5)
View(data_v5)
interoception <- data_v5[["data"]][c('id', 'start_date', 'hrv_dur','intero_15s_hbcount','intero_18s_hbcount', 'intero_20s_hbcount', 'intero_pulse_15s_hbcount','intero_pulse_18s_hbcount', 'intero_pulse_20s_hbcount')]
addDemo(interoception, V1)
intero_demo <- addDemo(interoception, V1)
intero_demo
View(intero_demo)
len(intero_demo$hrv_dur)
nrow(intero_demo$hrv_dur)
length(intero_demo$hrv_dur)
intero_demo$hrv_dur
table(intero_demo$hrv_dur)
intero_demo$hrv_dur[1]
intero_demo$hrv_assessed <- if(intero_demo$hrv_dur == "", 0, 1)
intero_demo$hrv_assessed <- if(intero_demo$hrv_dur == """", 0, 1)
intero_demo$hrv_assessed <- if(intero_demo$hrv_dur = "", 0, 1)
sum(!intero_demo$hrv=="")
intero_demo$risk_status_mom
intero_demo[ which(intero_demo$risk_status_mom=='0'), ]
intero_demo_lowrisk <- intero_demo[ which(intero_demo$risk_status_mom=='0'), ]
intero_demo_highrisk <- intero_demo[ which(intero_demo$risk_status_mom=='1'), ]
sum(!intero_demo_highrisk$hrv=="")
sum(!intero_demo_lowrisk$hrv=="")
intero_demo_lowrisk$intero_15s_hbcount
length(intero_demo_lowrisk$intero_15s_hbcount)
count(intero_demo_lowrisk$intero_15s_hbcount)
colSums(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
nrow(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
NROW(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
intero_demo_lowrisk$intero_15s_hbcount
colSums(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
intero_demo_lowrisk$intero_15s_hbcount
length(na.omit(intero_demo_lowrisk$intero_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_18s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_12s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_18s_hbcount))
length(na.omit(intero_demo_highrisk$intero_15s_hbcount))
length(na.omit(intero_demo_highrisk$intero_20s_hbcount))
sum(!intero_demo_lowrisk$hrv=="")
sum(!intero_demo_highrisk$hrv=="")
length(na.omit(intero_demo_lowrisk$intero_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_20s_hbcount))
na.omit(intero_demo_lowrisk$intero_20s_hbcount)
length(intero_demo$intero_20s_hbcount)
length(intero_demo$intero_20s_hbcount)
colSums(intero_demo$intero_20s_hbcount==0)
nrow(intero_demo$intero_20s_hbcount==0)
NROW(intero_demo$intero_20s_hbcount==0)
table(intero_demo$intero_20s_hbcount)
length(na.omit(intero_demo_lowrisk$intero_pulse_18s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_20s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_pulse_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_pulse_18s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_pulse_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_pulse_15s_hbcount))
length(na.omit(intero_demo_highrisk$intero_pulse_18s_hbcount))
length(na.omit(intero_demo_highrisk$intero_pulse_20s_hbcount))
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
addDemo(mri, V1)
mri <- addDemo(mri, V1)
View(mri)
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3','notes_mri_run4', 'notes_mri_run5', 'childnotes)]
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3','notes_mri_run4', 'notes_mri_run5', 'childnotes')]
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3','notes_mri_run4', 'notes_mri_run5', 'childnotes')]
View(mri)
View(mri)
