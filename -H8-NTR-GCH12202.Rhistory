extractIDs <- function(list){
# save name of list as a string
dataframe_name <- deparse(substitute(list))
# get visit number
visit_num <- substr(dataframe_name, 7, 7)
# Extract ID and assign to list_name
dataframe_name <- list[["data"]][c('id','start_date')]
# Add visit column
dataframe_name$visit <- visit_num
return(dataframe_name)
}
#' Add demo data (risk_cat, sex, age) to a dataframe by matching IDs with a reference dataframe
#' @param df dataframe with 'id' column
#' @param reference_df dataframe 'id' and demographic variables (sex, risk_status_mom, risk_status_both, dob)
#' @return dataframe with id, sex, risk_cat, and age_yr columns
addDemo <- function(df, reference_df){
for (row in 1:nrow(df)) {
row_id = df$id[row]
# Add risk status
df$risk_status_mom[row] <- reference_df$risk_status_mom[reference_df$id ==
row_id]
df$risk_status_both[row] <- reference_df$risk_status_both[reference_df$id ==
row_id]
# Add sex
df$sex[row] <- reference_df$sex[reference_df$id == row_id]
# Calculate age at visit
df$age_yr[row] <- round(lubridate::`%--%`(reference_df$dob[reference_df$id == row_id],
df$start_date[row])/lubridate::years(1), digits = 2)
}
return(df)
}
# Extract IDs and demo variables from V1 database
V1 <- data_v1[["data"]][c('id', 'risk_status_mom','risk_status_both','sex', 'dob', 'age_yr')]
V1$visit <- "1"
# Extract IDs from V2-V7 databases and add visit column (use extractIDs())
V2 <- extractIDs(data_v2)
V3 <- extractIDs(data_v3)
V4 <- extractIDs(data_v4)
V5 <- extractIDs(data_v5)
V6 <- extractIDs(data_v6)
V7 <- extractIDs(data_v7)
# Add demo data to V2-V7 dataframes by referencing V1
nonV1_list <- list(V2, V3, V4, V5, V6, V7)
nonV1_list <- lapply(nonV1_list, addDemo, reference_df = V1)
# Combine visit dataframes
V1_7 <- bind_rows(V1, nonV1_list)
# Convert 'haven_labelled' datatypes
V1_7 <- convertHaven(V1_7)
# Select variables to include in table
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
convertHaven <- function(df){
for (v in 1:ncol(df)) {
var_name <- names(df)[v]
class <- class(df[[var_name]])
if (grepl("haven_labelled", class[1])  ) {
df[[var_name]] <- labelled::unlabelled(df[[var_name]])
}
}
convertHaven <- function(df){
for (v in 1:ncol(df)) {
var_name <- names(df)[v]
class <- class(df[[var_name]])
if (grepl("haven_labelled", class[1])  ) {
df[[var_name]] <- labelled::unlabelled(df[[var_name]])
}
}
return(df)
}
V1_7 <- bind_rows(V1, nonV1_list)
V1_7 <- convertHaven(V1_7)
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
View(V5)
View(data_v5)
interoception <- data_v5[["data"]][c('id', 'start_date', 'hrv_dur','intero_15s_hbcount','intero_18s_hbcount', 'intero_20s_hbcount', 'intero_pulse_15s_hbcount','intero_pulse_18s_hbcount', 'intero_pulse_20s_hbcount')]
addDemo(interoception, V1)
intero_demo <- addDemo(interoception, V1)
intero_demo
View(intero_demo)
len(intero_demo$hrv_dur)
nrow(intero_demo$hrv_dur)
length(intero_demo$hrv_dur)
intero_demo$hrv_dur
table(intero_demo$hrv_dur)
intero_demo$hrv_dur[1]
intero_demo$hrv_assessed <- if(intero_demo$hrv_dur == "", 0, 1)
intero_demo$hrv_assessed <- if(intero_demo$hrv_dur == """", 0, 1)
intero_demo$hrv_assessed <- if(intero_demo$hrv_dur = "", 0, 1)
sum(!intero_demo$hrv=="")
intero_demo$risk_status_mom
intero_demo[ which(intero_demo$risk_status_mom=='0'), ]
intero_demo_lowrisk <- intero_demo[ which(intero_demo$risk_status_mom=='0'), ]
intero_demo_highrisk <- intero_demo[ which(intero_demo$risk_status_mom=='1'), ]
sum(!intero_demo_highrisk$hrv=="")
sum(!intero_demo_lowrisk$hrv=="")
intero_demo_lowrisk$intero_15s_hbcount
length(intero_demo_lowrisk$intero_15s_hbcount)
count(intero_demo_lowrisk$intero_15s_hbcount)
colSums(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
nrow(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
NROW(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
intero_demo_lowrisk$intero_15s_hbcount
colSums(!is.na(intero_demo_lowrisk$intero_15s_hbcount))
intero_demo_lowrisk$intero_15s_hbcount
length(na.omit(intero_demo_lowrisk$intero_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_18s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_12s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_18s_hbcount))
length(na.omit(intero_demo_highrisk$intero_15s_hbcount))
length(na.omit(intero_demo_highrisk$intero_20s_hbcount))
sum(!intero_demo_lowrisk$hrv=="")
sum(!intero_demo_highrisk$hrv=="")
length(na.omit(intero_demo_lowrisk$intero_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_20s_hbcount))
na.omit(intero_demo_lowrisk$intero_20s_hbcount)
length(intero_demo$intero_20s_hbcount)
length(intero_demo$intero_20s_hbcount)
colSums(intero_demo$intero_20s_hbcount==0)
nrow(intero_demo$intero_20s_hbcount==0)
NROW(intero_demo$intero_20s_hbcount==0)
table(intero_demo$intero_20s_hbcount)
length(na.omit(intero_demo_lowrisk$intero_pulse_18s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_20s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_pulse_15s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_pulse_18s_hbcount))
length(na.omit(intero_demo_lowrisk$intero_pulse_20s_hbcount))
length(na.omit(intero_demo_highrisk$intero_pulse_15s_hbcount))
length(na.omit(intero_demo_highrisk$intero_pulse_18s_hbcount))
length(na.omit(intero_demo_highrisk$intero_pulse_20s_hbcount))
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3')]
addDemo(mri, V1)
mri <- addDemo(mri, V1)
View(mri)
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3','notes_mri_run4', 'notes_mri_run5', 'childnotes)]
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3','notes_mri_run4', 'notes_mri_run5', 'childnotes')]
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3','notes_mri_run4', 'notes_mri_run5', 'childnotes')]
View(mri)
View(mri)
library(gtsummary)
theme_gtsummary_compact()
#need to load the package also or it wont work
library(kellertools)
knitr::opts_chunk$set(tidy = TRUE, tidy.opts = list(comment = FALSE), echo=TRUE, warning=FALSE, message=FALSE, comment = NA)
#also need .Rmd related packages loaded/installed
library(knitr)
library(kableExtra)
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
convertHaven <- function(df){
for (v in 1:ncol(df)) {
var_name <- names(df)[v]
class <- class(df[[var_name]])
if (grepl("haven_labelled", class[1])  ) {
df[[var_name]] <- labelled::unlabelled(df[[var_name]])
}
}
return(df)
}
library(dplyr)
#this path is specific to your laptop - we should try to create some fake/simulated data that we can rely on for examples
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
# Load data
data_v1 <- util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
data_v2 <- util_fbs_merge_v2(child_file_pattern = 'Child_V2', parent_file_pattern = 'Parent_V2', parentV4_file_pattern = 'Parent_V4', data_path = data_path)
data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path, model_DD = FALSE)
data_v4 <- util_fbs_merge_v4(child_file_pattern = 'Child_V4', parent_file_pattern = 'Parent_V4', data_path = data_path)
data_v5 <- util_fbs_merge_v5(child_file_pattern = 'Child_V5', parent_file_pattern = 'Parent_V5', data_path = data_path)
data_v6 <- util_fbs_merge_v6(child_file_pattern = 'Child_V6', parent_file_pattern = 'Parent_V6', data_path = data_path)
data_v7 <- util_fbs_merge_v7(child_file_pattern = 'Child_V7', parent_file_pattern = 'Parent_V7', data_path = data_path)
#' Extract id, start_date, visit number from list[["data"]]
#' @param list a list with data saved in a dataframe 'data' (e.g., output of running util_fbs_merge scripts)
#' @return a dataframe with ids, startdates, and visit number
#' @examples
#' #if output of merge script saved as 'data_v3': E.g.) data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path)
#' extractIDs(data_v3)
extractIDs <- function(list){
# save name of list as a string
dataframe_name <- deparse(substitute(list))
# get visit number
visit_num <- substr(dataframe_name, 7, 7)
# Extract ID and assign to list_name
dataframe_name <- list[["data"]][c('id','start_date')]
# Add visit column
dataframe_name$visit <- visit_num
return(dataframe_name)
}
#' Add demo data (risk_cat, sex, age) to a dataframe by matching IDs with a reference dataframe
#' @param df dataframe with 'id' column
#' @param reference_df dataframe 'id' and demographic variables (sex, risk_status_mom, risk_status_both, dob)
#' @return dataframe with id, sex, risk_cat, and age_yr columns
addDemo <- function(df, reference_df){
for (row in 1:nrow(df)) {
row_id = df$id[row]
# Add risk status
df$risk_status_mom[row] <- reference_df$risk_status_mom[reference_df$id ==
row_id]
df$risk_status_both[row] <- reference_df$risk_status_both[reference_df$id ==
row_id]
# Add sex
df$sex[row] <- reference_df$sex[reference_df$id == row_id]
# Calculate age at visit
df$age_yr[row] <- round(lubridate::`%--%`(reference_df$dob[reference_df$id == row_id],
df$start_date[row])/lubridate::years(1), digits = 2)
}
return(df)
}
# Extract IDs and demo variables from V1 database
V1 <- data_v1[["data"]][c('id', 'risk_status_mom','risk_status_both','sex', 'dob', 'age_yr')]
V1$visit <- "1"
# Extract IDs from V2-V7 databases and add visit column (use extractIDs())
V2 <- extractIDs(data_v2)
V3 <- extractIDs(data_v3)
V4 <- extractIDs(data_v4)
V5 <- extractIDs(data_v5)
V6 <- extractIDs(data_v6)
V7 <- extractIDs(data_v7)
# Add demo data to V2-V7 dataframes by referencing V1
nonV1_list <- list(V2, V3, V4, V5, V6, V7)
nonV1_list <- lapply(nonV1_list, addDemo, reference_df = V1)
# Combine visit dataframes
V1_7 <- bind_rows(V1, nonV1_list)
# Convert 'haven_labelled' datatypes
V1_7 <- convertHaven(V1_7)
# Select variables to include in table
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
mri <- data_v6[["data"]][c('id', 'start_date', 'notes_mri_mprage','notes_mri_restingstate','notes_mri_run1', 'notes_mri_run2', 'notes_mri_run3','notes_mri_run4', 'notes_mri_run5', 'childnotes')]
View(mri)
mri$notes_mri_mprage
mri[mri$id==113]
mri$id==113
library(kellertools)
data_path <- '/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
util_fbs_child_v1dat('Child_V1', data_path = data_path)
visit_dates_path
length(qv1_child_path)
qv1_child_path
grepl('DXA', qv1_child_path, fixed = TRUE)
sum(grepl('DXA', qv1_child_path, fixed = TRUE))
DXA_file <- grepl('DXA', qv1_child_path, fixed = TRUE)
DXA_file
qv1_child_path[DXA_file]
qv1_child_DXApath <- qv1_child_path[DXA_file]
qv1_child_DXA_exists <- file.exists(qv1_child_DXApath)
qv1_child_DXA_exists
qv1_child_path[isFALSE(DXA_file)]
DXA_file
isFALSE(DXA_file)
qv1_child_path[DXA_file == FALSE]
isTRUE(qv1_child_DXA_exists)
library(kellertools)
util_fbs_child_v1dat('Child_V1', data_path = data_path)
qv1_child_DXAlabels <- lapply(qv1_child_DXAdat, function(x) attributes(x)$label)
names(qv1_child_DXAlabels <- lapply(qv1_child_DXAdat, function(x) attributes(x)$label))
View(qv1_child_DXAlabels)
names(qv1_child_DXAdat) <- tolower(names(qv1_child_DXAdat))
names(qv1_child_DXAdat)
qv1_child_DXAlabels[c(112:119, 123:126)]
qv1_child_DXAlabels
names(qv1_child_DXAdat)
for (var in 1:length(names(qv1_child_DXAdat))) {
var_name <- as.character(names(qv1_child_DXAdat)[var])
if (grepl("percent", var_name, fixed = TRUE)) {
names(qv1_child_DXAdat)[var] <- gsub("\\percent.*", "perc", var_name)
}
}
names(qv1_child_DXAdat)
for (var in 1:length(names(qv1_child_DXAdat))) {
var_name <- names(qv1_child_DXAdat)[var]
if (grepl("percent", var_name, fixed = TRUE)) {
names(qv1_child_DXAdat)[var] <- gsub("\\percent.*", "perc", var_name)
}
}
for (var in 1:length(names(qv1_child_DXAdat))) {
var_name <- names(qv1_child_DXAdat)[var]}
var = 1
var_name <- names(qv1_child_DXAdat)[var]
var_name
for (var in 1:length(names(qv1_child_DXAdat))) {
var_name <- names(qv1_child_DXAdat)[var]
if (grepl("percent", var_name, fixed = TRUE)) {
names(qv1_child_DXAdat)[var] <- gsub("\\percent.*", "perc", var_name)
}
}
names(qv1_child_DXAdat)
var = 111
var_name <- names(qv1_child_DXAdat)[var]
var_name
grepl("percent", var_name, fixed = TRUE)
gsub("\\percent.*", "perc", var_name)
gsub("percent", "perc", var_name)
for (var in 1:length(names(qv1_child_DXAdat))) {
var_name <- names(qv1_child_DXAdat)[var]
if (grepl("percent", var_name, fixed = TRUE)) {
names(qv1_child_DXAdat)[var] <- gsub("percent", "perc", var_name)
}
}
library(kellertools)
util_fbs_child_v1dat('Child_V1', data_path = data_path)
for (var in 1:length(names(qv1_child_DXAdat))) {
var_name <- names(qv1_child_DXAdat)[var]
if (grepl("percent", var_name, fixed = TRUE)) {
names(qv1_child_DXAdat)[var] <- gsub("percent", "perc", var_name)
}
}
util_fbs_child_v1dat('Child_V1', data_path = data_path)
names(qv1_child_DXAdat)[var]
names(qv1_child_DXAdat)
util_fbs_child_v1dat('Child_V1', data_path = data_path)
names(qv1_child_DXAdat)
names(qv1_child_DXAdat)[var]
names(qv1_child_DXAdat)
ames(qv1_child_DXAdat)[c(65, 68, 70, 73, 75, 78, 80, 83, 85, 88, 90, 93, 95, 99, 102, 104, 108, 111:119, 123:126)] <- c('l_arm_lean_bmc_comb', 'l_arm_perc_fat_ptile', 'r_arm_lean_bmc_comb', 'r_arm_perc_fat_ptile', 'trunk_lean_bmc_comb', 'trunk_perc_fat_ptile', 'l_leg_lean_bmc_comb', 'l_leg_perc_fat_ptile', 'r_leg_lean_bmc_comb', 'r_leg_perc_fat_ptile', 'subtotal_lean_bmc_comb', 'subtotal_perc_fat_ptile', 'head_lean_bmc_comb', 'total_lean_bmc_comb', 'total_lean_bmc_comb', 'total_perc_fat_ptile', 'android_lean_bmc_comb', 'gynoid_lean_bmc_comb', 'total_body_perc_fat', 'bodyfat_ptile', 'fatmass_height_ratio', 'fatmass_height_ratio_ptile', 'android_gynoid_ratio', 'percfat_trunk_legs_ratio', 'percfat_trunk_legs_ratio_ptile', 'fatmass_trunk_legs_ratio', 'fatmass_trunk_legs_ratio_ptile', 'lean_height_ratio', 'lean_height_ratio_ptile', 'appen_lean_height', 'appen_lean_height_ptile')
names(qv1_child_DXAdat)[c(65, 68, 70, 73, 75, 78, 80, 83, 85, 88, 90, 93, 95, 99, 102, 104, 108, 111:119, 123:126)] <- c('l_arm_lean_bmc_comb', 'l_arm_perc_fat_ptile', 'r_arm_lean_bmc_comb', 'r_arm_perc_fat_ptile', 'trunk_lean_bmc_comb', 'trunk_perc_fat_ptile', 'l_leg_lean_bmc_comb', 'l_leg_perc_fat_ptile', 'r_leg_lean_bmc_comb', 'r_leg_perc_fat_ptile', 'subtotal_lean_bmc_comb', 'subtotal_perc_fat_ptile', 'head_lean_bmc_comb', 'total_lean_bmc_comb', 'total_lean_bmc_comb', 'total_perc_fat_ptile', 'android_lean_bmc_comb', 'gynoid_lean_bmc_comb', 'total_body_perc_fat', 'bodyfat_ptile', 'fatmass_height_ratio', 'fatmass_height_ratio_ptile', 'android_gynoid_ratio', 'percfat_trunk_legs_ratio', 'percfat_trunk_legs_ratio_ptile', 'fatmass_trunk_legs_ratio', 'fatmass_trunk_legs_ratio_ptile', 'lean_height_ratio', 'lean_height_ratio_ptile', 'appen_lean_height', 'appen_lean_height_ptile')
length([c(65, 68, 70, 73, 75, 78, 80, 83, 85, 88, 90, 93, 95, 99, 102, 104, 108, 111:119, 123:126)])
length(c(65, 68, 70, 73, 75, 78, 80, 83, 85, 88, 90, 93, 95, 99, 102, 104, 108, 111:119, 123:126))
length(c('l_arm_lean_bmc_comb', 'l_arm_perc_fat_ptile', 'r_arm_lean_bmc_comb', 'r_arm_perc_fat_ptile', 'trunk_lean_bmc_comb', 'trunk_perc_fat_ptile', 'l_leg_lean_bmc_comb', 'l_leg_perc_fat_ptile', 'r_leg_lean_bmc_comb', 'r_leg_perc_fat_ptile', 'subtotal_lean_bmc_comb', 'subtotal_perc_fat_ptile', 'head_lean_bmc_comb', 'total_lean_bmc_comb', 'total_lean_bmc_comb', 'total_perc_fat_ptile', 'android_lean_bmc_comb', 'gynoid_lean_bmc_comb', 'total_body_perc_fat', 'bodyfat_ptile', 'fatmass_height_ratio', 'fatmass_height_ratio_ptile', 'android_gynoid_ratio', 'percfat_trunk_legs_ratio', 'percfat_trunk_legs_ratio_ptile', 'fatmass_trunk_legs_ratio', 'fatmass_trunk_legs_ratio_ptile', 'lean_height_ratio', 'lean_height_ratio_ptile', 'appen_lean_height', 'appen_lean_height_ptile'))
names(qv1_child_DXAdat)[c(65, 68, 70, 73, 75, 78, 80, 83, 85, 88, 90, 93, 95, 99, 102, 104, 108, 111:119, 123:126)] <- c('l_arm_lean_bmc_comb', 'l_arm_perc_fat_ptile', 'r_arm_lean_bmc_comb', 'r_arm_perc_fat_ptile', 'trunk_lean_bmc_comb', 'trunk_perc_fat_ptile', 'l_leg_lean_bmc_comb', 'l_leg_perc_fat_ptile', 'r_leg_lean_bmc_comb', 'r_leg_perc_fat_ptile', 'subtotal_lean_bmc_comb', 'subtotal_perc_fat_ptile', 'head_lean_bmc_comb', 'total_lean_bmc_comb', 'total_perc_fat_ptile', 'android_lean_bmc_comb', 'gynoid_lean_bmc_comb', 'total_body_perc_fat', 'bodyfat_ptile', 'fatmass_height_ratio', 'fatmass_height_ratio_ptile', 'android_gynoid_ratio', 'percfat_trunk_legs_ratio', 'percfat_trunk_legs_ratio_ptile', 'fatmass_trunk_legs_ratio', 'fatmass_trunk_legs_ratio_ptile', 'lean_height_ratio', 'lean_height_ratio_ptile', 'appen_lean_height', 'appen_lean_height_ptile')
names(qv1_child_DXAdat)
#update labels
names(qv1_child_DXAlabels) <- names(qv1_child_DXAdat)
for (var in 1:length(names(qv1_child_DXAlabels))) {
var_name <- names(qv1_child_DXAlabels)[var]
if (grepl("VAT", var_name, fixed = TRUE) | grepl("vat", var_name, fixed = TRUE)) {
qv1_child_DXAlabels[[var_name]] <- gsub("VAT", "viseral adipose tissue (VAT)", var_name)
}
if (grepl("BMC", var_name, fixed = TRUE) | grepl("bmc", var_name, fixed = TRUE)) {
qv1_child_DXAlabels[[var_name]] <- gsub("BMC", "bone mineral content (BMC)", var_name)
}
if (grepl("BMD", var_name, fixed = TRUE) | grepl("bmd", var_name, fixed = TRUE)) {
qv1_child_DXAlabels[[var_name]] <- gsub("BMC", "bone mineral density (BMD)", var_name)
}
if (grepl("Percentile AM", var_name, fixed = TRUE)) {
qv1_child_DXAlabels[[var_name]] <- gsub("Percentile AM", "aged matched percentile", var_name)
}
}
library(kellertools)
library(kellertools)
util_fbs_child_v1dat('Child_V1', data_path = data_path)
library(kellertools)
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat.R", echo=TRUE)
util_fbs_child_v1dat('Child_V1', data_path = data_path)
View(qv1_child_DXAlabels)
qv1_child_DXAdat <- as.data.frame(haven::read_spss(qv1_child_DXApath))
qv1_child_DXAdat <- as.data.frame(haven::read_spss(qv1_child_DXApath))
util_fbs_child_v1dat('Child_V1', data_path = data_path)
util_fbs_child_v1dat('Child_V1', data_path = data_path)
View(qv1_child_DXAlabels)
View(qv1_child_DXAlabels)
View(qv1_child_DXAlabels)
library(kellertools)
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat.R", echo=TRUE)
util_fbs_child_v1dat('Child_V1', data_path = data_path)
names(qv1_child_DXAlabels)
View(qv1_child_DXAlabels)
qv1_child_clean <- merge(qv1_child_clean, qv1_child_DXAdat[c(18, 26:135)], by = 'id', all.x = TRUE)
names(qv1_child_clean)
nrow(qv1_child_clean)
library(kellertools)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
data_path <- '/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
library(kellertools)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat.R", echo=TRUE)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
library(kellertools)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat.R", echo=TRUE)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
ncol(qv1_child_clean)
length(qv1_child_clean_labels)
names(qv1_child_clean_labels)
names(qv1_child_clean)
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat.R", echo=TRUE)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
data_path <- '/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
library(kellertools)
dat = util_fbs_child_v1dat('Child_V1', data_path = data_path)
dat
View(dat$data)
library(kellertools)
dat = util_fbs_child_v7dat('Child_V7', data_path = data_path)
names(qv7_child_DXAdat)
library(kellertools)
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1')
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
library(kellertools)
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
names(child_covidmerge_v1dat)
names(child_lab_v1dat[['data']])
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
names(qv1_child_clean)
names(qv1_child$data)
names(child_v1dat)
names(child_v1dat$data)
names(child_lab_v1dat)
names(child_lab_v1dat$data)
child_lab_v1dat <- util_fbs_child_v1dat_lab(child_file_pattern, data_path)
names(qv1_child_clean)
sum(DXA_file)
library(kellertools)
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat_lab.R", echo=TRUE)
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
qv1_child_pathlist
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat_lab.R", echo=TRUE)
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
source("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_child_v1dat_lab.R", echo=TRUE)
library(kellertools)
util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
names(child_lab_v1dat[['data']])
names(child_covidmerge_v1dat)
child_covidmerge_v1dat <- child_covidmerge_v1dat[c(1:160, 273:361, 161:272)]
names(child_covidmerge_v1dat)
child_covidmerge_v1dat[['pss_soup_eat']] <- NA
child_covidmerge_v1dat[['pss_soup_much']] <- NA
child_covidmerge_v1dat[['pss_soup_like']] <- NA
names(child_covidmerge_v1dat)
child_covidmerge_v1dat <- child_covidmerge_v1dat[c(1:243, 362:364, 244:361)]
names(child_covidmerge_v1dat)
all_child_v1dat <- rbind.data.frame(child_v1dat[['data']], child_covidmerge_v1dat)
library(kellertools)
debugSource("~/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/kellertools/R/util_fbs_merge_v1.R", echo=TRUE)
library(kellertools)
library(gtsummary)
theme_gtsummary_compact()
#need to load the package also or it wont work
library(kellertools)
convertHaven <- function(df){
for (v in 1:ncol(df)) {
var_name <- names(df)[v]
class <- class(df[[var_name]])
if (grepl("haven_labelled", class[1])  ) {
df[[var_name]] <- labelled::unlabelled(df[[var_name]])
}
}
return(df)
}
#this path is specific to your laptop - we should try to create some fake/simulated data that we can rely on for examples
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
library(dplyr)
#this path is specific to your laptop - we should try to create some fake/simulated data that we can rely on for examples
data_path = '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/untouchedRaw/Qualtrics_Raw/'
# Load data
data_v1 <- util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
data_v2 <- util_fbs_merge_v2(child_file_pattern = 'Child_V2', parent_file_pattern = 'Parent_V2', parentV4_file_pattern = 'Parent_V4', data_path = data_path)
data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path, model_DD = FALSE)
data_v4 <- util_fbs_merge_v4(child_file_pattern = 'Child_V4', parent_file_pattern = 'Parent_V4', data_path = data_path)
data_v5 <- util_fbs_merge_v5(child_file_pattern = 'Child_V5', parent_file_pattern = 'Parent_V5', data_path = data_path)
data_v6 <- util_fbs_merge_v6(child_file_pattern = 'Child_V6', parent_file_pattern = 'Parent_V6', data_path = data_path)
data_v7 <- util_fbs_merge_v7(child_file_pattern = 'Child_V7', parent_file_pattern = 'Parent_V7', data_path = data_path)
#' Extract id, start_date, visit number from list[["data"]]
#' @param list a list with data saved in a dataframe 'data' (e.g., output of running util_fbs_merge scripts)
#' @return a dataframe with ids, startdates, and visit number
#' @examples
#' #if output of merge script saved as 'data_v3': E.g.) data_v3 <- util_fbs_merge_v3(child_file_pattern = 'Child_V3', parent_file_pattern = 'Parent_V3', data_path = data_path)
#' extractIDs(data_v3)
extractIDs <- function(list){
# save name of list as a string
dataframe_name <- deparse(substitute(list))
# get visit number
visit_num <- substr(dataframe_name, 7, 7)
# Extract ID and assign to list_name
dataframe_name <- list[["data"]][c('id','start_date')]
# Add visit column
dataframe_name$visit <- visit_num
return(dataframe_name)
}
#' Add demo data (risk_cat, sex, age) to a dataframe by matching IDs with a reference dataframe
#' @param df dataframe with 'id' column
#' @param reference_df dataframe 'id' and demographic variables (sex, risk_status_mom, risk_status_both, dob)
#' @return dataframe with id, sex, risk_cat, and age_yr columns
addDemo <- function(df, reference_df){
for (row in 1:nrow(df)) {
row_id = df$id[row]
# Add risk status
df$risk_status_mom[row] <- reference_df$risk_status_mom[reference_df$id ==
row_id]
df$risk_status_both[row] <- reference_df$risk_status_both[reference_df$id ==
row_id]
# Add sex
df$sex[row] <- reference_df$sex[reference_df$id == row_id]
# Calculate age at visit
df$age_yr[row] <- round(lubridate::`%--%`(reference_df$dob[reference_df$id == row_id],
df$start_date[row])/lubridate::years(1), digits = 2)
}
return(df)
}
# Extract IDs and demo variables from V1 database
V1 <- data_v1[["data"]][c('id', 'risk_status_mom','risk_status_both','sex', 'dob', 'age_yr')]
V1$visit <- "1"
# Extract IDs from V2-V7 databases and add visit column (use extractIDs())
V2 <- extractIDs(data_v2)
V3 <- extractIDs(data_v3)
V4 <- extractIDs(data_v4)
V5 <- extractIDs(data_v5)
V6 <- extractIDs(data_v6)
V7 <- extractIDs(data_v7)
# Add demo data to V2-V7 dataframes by referencing V1
nonV1_list <- list(V2, V3, V4, V5, V6, V7)
nonV1_list <- lapply(nonV1_list, addDemo, reference_df = V1)
# Combine visit dataframes
V1_7 <- bind_rows(V1, nonV1_list)
# Convert 'haven_labelled' datatypes
V1_7 <- convertHaven(V1_7)
# Select variables to include in table
V1_7 <- subset(V1_7, select = c(risk_status_mom, risk_status_both, sex, age_yr, visit))
data_v1 <- util_fbs_merge_v1(child_file_pattern = 'Child_V1', parent_file_pattern = 'Parent_V1', data_path = data_path)
